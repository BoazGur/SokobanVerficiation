MODULE main

DEFINE n := 3; m := 4;
	possible_up := !((y = 0) | (board[(y - 1)*m + x] = solamit) | (((board[(y - 1)*m + x] = dollar) | (board[(y - 1)*m + x] = dollar)) & ((board[(y - 2)*m + x] = dollar) | (board[(y - 2)*m + x] = dollar) | (board[(y - 2)*m + x] = solamit))));
	possible_down := !((y = n - 1) | (board[(y + 1)*m + x] = solamit) | (((board[(y + 1)*m + x] = dollar) | (board[(y + 1)*m + x] = dollar)) & ((board[(y + 2)*m + x] = dollar) | (board[(y + 2)*m + x] = dollar) | (board[(y + 2)*m + x] = solamit))));
	possible_right := !((x = m - 1) | (board[y*m + x + 1] = solamit) | (((board[y*m + x + 1] = dollar) | (board[y*m + x + 1] = dollar)) & ((board[y*m + x + 2] = dollar) | (board[y*m + x + 2] = dollar) | (board[y*m + x + 2] = solamit))));
	possible_left := !((x = 0) | (board[y*m + x - 1] = solamit) | (((board[y*m + x - 1] = dollar) | (board[y*m + x - 1] = dollar)) & ((board[y*m + x - 2] = dollar) | (board[y*m + x - 2] = dollar) | (board[y*m + x - 2] = solamit))));

	done := (board[0] != dollar) & (board[1] != dollar) & (board[2] != dollar) & (board[3] != dollar) & (board[4] != dollar) & (board[5] != dollar) & (board[6] != dollar) & (board[7] != dollar) & (board[8] != dollar) & (board[9] != dollar) & (board[10] != dollar) & (board[11] != dollar);

VAR
	board: array 0..11 of {shtrudel, plus, dollar, star, solamit, dot, minus};
	turn: {u, d, r, l, none};
	x: integer;
	y: integer;

ASSIGN
	init(turn) := none;
	init(x) := 1;
	init(y) := 1;

	init(board[0]) := solamit;
	init(board[1]) := solamit;
	init(board[2]) := solamit;
	init(board[3]) := solamit;
	init(board[4]) := solamit;
	init(board[5]) := shtrudel;
	init(board[6]) := dollar;
	init(board[7]) := dot;
	init(board[8]) := solamit;
	init(board[9]) := solamit;
	init(board[10]) := solamit;
	init(board[11]) := solamit;

	next(turn) := case
		(possible_up) & (possible_down) & (possible_right) & (possible_left) : {u, d, r, l};
		(possible_up) & (possible_down) & (possible_right) : {u, d, r};
		(possible_up) & (possible_down) & (possible_left) : {u, d, l};
		(possible_up) & (possible_right) & (possible_left) : {u, r, l};
		(possible_down) & (possible_right) & (possible_left) : {d, r, l};
		(possible_up) & (possible_down) : {u, d};
		(possible_up) & (possible_right) : {u, r};
		(possible_up) & (possible_left) : {u, l};
		(possible_down) & (possible_right) : {d, r};
		(possible_down) & (possible_left) : {d, l};
		(possible_right) & (possible_left) : {r, l};
		(possible_up) : {u};
		(possible_down) : {d};
		(possible_right) : {r};
		(possible_left) : {l};
		TRUE : none;
	esac;

	next(x) := case
		(next(turn) = r) : x + 1;
		(next(turn) = l) : x - 1;
		TRUE : x;
	esac;

	next(y) := case
		(next(turn) = d) : y + 1;
		(next(turn) = u) : y - 1;
		TRUE : y;
	esac;

	next(board) := case
		(next(turn) = r) :
			board[y*m + x] = case
				board[y*m + x] = shtrudel : minus;
				board[y*m + x] = plus : dot;
				TRUE : board[y*m + x];
			esac
			& board[y*m + x + 1] = case
				((board[y*m + x + 1] = minus) | (board[y*m + x + 1] = dollar)) : shtrudel;
				((board[y*m + x + 1] = dot) | (board[y*m + x + 1] = star)) : plus;
				TRUE : board[y*m + x + 1];
			esac
			& board[y*m + x + 2] = case
				((board[y*m + x + 1] = star) | (board[y*m + x + 1] = dollar)) & (board[y*m + x + 2] = minus) : dollar;
				((board[y*m + x + 1] = star) | (board[y*m + x + 1] = dollar)) & (board[y*m + x + 2] = dot) : star;
				TRUE : board[y*m + x + 2];
			esac;

		(next(turn) = l) :
			board[y*m + x] = case
				board[y*m + x] = shtrudel : minus;
				board[y*m + x] = plus : dot;
				TRUE : board[y*m + x];
			esac
			& board[y*m + x + 1] = case
				((board[y*m + x - 1] = minus) | (board[y*m + x - 1] = dollar)) : shtrudel;
				((board[y*m + x - 1] = dot) | (board[y*m + x - 1] = star)) : plus;
				TRUE : board[y*m + x - 1];
			esac
			& board[y*m + x - 2] = case
				((board[y*m + x - 1] = star) | (board[y*m + x - 1] = dollar)) & (board[y*m + x - 2] = minus) : dollar;
				((board[y*m + x - 1] = star) | (board[y*m + x - 1] = dollar)) & (board[y*m + x - 2] = dot) : star;
				TRUE : board[y*m + x - 2];
			esac;
		
		(next(turn) = u) :
			board[y*m + x] = case
				board[y*m + x] = shtrudel : minus;
				board[y*m + x] = plus : dot;
				TRUE : board[y*m + x];
			esac
			& board[(y - 1)*m + x] = case
				((board[(y - 1)*m + x] = minus) | (board[(y - 1)*m + x] = dollar)) : shtrudel;
				((board[(y - 1)*m + x] = dot) | (board[(y - 1)*m + x] = star)) : plus;
				TRUE : board[(y - 1)*m + x];
			esac
			& board[(y - 2)*m + x] = case
				((board[(y - 1)*m + x] = star) | (board[(y - 1)*m + x] = dollar)) & (board[(y - 2)*m + x] = minus) : dollar;
				((board[(y - 1)*m + x] = star) | (board[(y - 1)*m + x] = dollar)) & (board[(y - 2)*m + x] = dot) : star;
				TRUE : board[(y - 2)*m + x];
			esac;

		(next(turn) = d) :
			board[y*m + x] = case
				board[y*m + x] = shtrudel : minus;
				board[y*m + x] = plus : dot;
				TRUE : board[y*m + x];
			esac
			& board[(y + 1)*m + x] = case
				((board[(y + 1)*m + x] = minus) | (board[(y + 1)*m + x] = dollar)) : shtrudel;
				((board[(y + 1)*m + x] = dot) | (board[(y + 1)*m + x] = star)) : plus;
				TRUE : board[(y + 1)*m + x];
			esac
			& board[(y + 2)*m + x] = case
				((board[(y + 1)*m + x] = star) | (board[(y + 1)*m + x] = dollar)) & (board[(y + 2)*m + x] = minus) : dollar;
				((board[(y + 1)*m + x] = star) | (board[(y + 1)*m + x] = dollar)) & (board[(y + 2)*m + x] = dot) : star;
				TRUE : board[(y + 2)*m + x];
			esac;
	esac;

LTLSPEC !F(done)