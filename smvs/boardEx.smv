MODULE main

DEFINE n := 11; m := 19;
	possible_up := !((y = 0) or (board[y-1][x] = #) or (((board[y-1][x] = $) or (board[y-1][x] = $)) and ((board[y-2][x] = $) or (board[y-2][x] = $) or (board[y-2][x] = #))));
	possible_down := !((y = n-1) or (board[y+1][x] = #) or (((board[y+1][x] = $) or (board[y+1][x] = $)) and ((board[y+2][x] = $) or (board[y+2][x] = $) or (board[y+2][x] = #))));
	possible_right := !((x = m-1) or (board[y][x+1] = #) or (((board[y][x+1] = $) or (board[y][x+1] = $)) and ((board[y][x+2] = $) or (board[y][x+2] = $) or (board[y][x+2] = #))));
	possible_left := !((x = 0) or (board[y][x-1] = #) or (((board[y][x-1] = $) or (board[y][x-1] = $)) and ((board[y][x-2] = $) or (board[y][x-2] = $) or (board[y][x-2] = #))));

	done := (board[0][0] != $) and (board[0][1] != $) and (board[0][2] != $) and (board[0][3] != $) and (board[0][4] != $) and (board[0][5] != $) and (board[0][6] != $) and (board[0][7] != $) and (board[0][8] != $) and (board[0][9] != $) and (board[0][10] != $) and (board[0][11] != $) and (board[0][12] != $) and (board[0][13] != $) and (board[0][14] != $) and (board[0][15] != $) and (board[0][16] != $) and (board[0][17] != $) and (board[0][18] != $) and (board[1][0] != $) and (board[1][1] != $) and (board[1][2] != $) and (board[1][3] != $) and (board[1][4] != $) and (board[1][5] != $) and (board[1][6] != $) and (board[1][7] != $) and (board[1][8] != $) and (board[1][9] != $) and (board[1][10] != $) and (board[1][11] != $) and (board[1][12] != $) and (board[1][13] != $) and (board[1][14] != $) and (board[1][15] != $) and (board[1][16] != $) and (board[1][17] != $) and (board[1][18] != $) and (board[2][0] != $) and (board[2][1] != $) and (board[2][2] != $) and (board[2][3] != $) and (board[2][4] != $) and (board[2][5] != $) and (board[2][6] != $) and (board[2][7] != $) and (board[2][8] != $) and (board[2][9] != $) and (board[2][10] != $) and (board[2][11] != $) and (board[2][12] != $) and (board[2][13] != $) and (board[2][14] != $) and (board[2][15] != $) and (board[2][16] != $) and (board[2][17] != $) and (board[2][18] != $) and (board[3][0] != $) and (board[3][1] != $) and (board[3][2] != $) and (board[3][3] != $) and (board[3][4] != $) and (board[3][5] != $) and (board[3][6] != $) and (board[3][7] != $) and (board[3][8] != $) and (board[3][9] != $) and (board[3][10] != $) and (board[3][11] != $) and (board[3][12] != $) and (board[3][13] != $) and (board[3][14] != $) and (board[3][15] != $) and (board[3][16] != $) and (board[3][17] != $) and (board[3][18] != $) and (board[4][0] != $) and (board[4][1] != $) and (board[4][2] != $) and (board[4][3] != $) and (board[4][4] != $) and (board[4][5] != $) and (board[4][6] != $) and (board[4][7] != $) and (board[4][8] != $) and (board[4][9] != $) and (board[4][10] != $) and (board[4][11] != $) and (board[4][12] != $) and (board[4][13] != $) and (board[4][14] != $) and (board[4][15] != $) and (board[4][16] != $) and (board[4][17] != $) and (board[4][18] != $) and (board[5][0] != $) and (board[5][1] != $) and (board[5][2] != $) and (board[5][3] != $) and (board[5][4] != $) and (board[5][5] != $) and (board[5][6] != $) and (board[5][7] != $) and (board[5][8] != $) and (board[5][9] != $) and (board[5][10] != $) and (board[5][11] != $) and (board[5][12] != $) and (board[5][13] != $) and (board[5][14] != $) and (board[5][15] != $) and (board[5][16] != $) and (board[5][17] != $) and (board[5][18] != $) and (board[6][0] != $) and (board[6][1] != $) and (board[6][2] != $) and (board[6][3] != $) and (board[6][4] != $) and (board[6][5] != $) and (board[6][6] != $) and (board[6][7] != $) and (board[6][8] != $) and (board[6][9] != $) and (board[6][10] != $) and (board[6][11] != $) and (board[6][12] != $) and (board[6][13] != $) and (board[6][14] != $) and (board[6][15] != $) and (board[6][16] != $) and (board[6][17] != $) and (board[6][18] != $) and (board[7][0] != $) and (board[7][1] != $) and (board[7][2] != $) and (board[7][3] != $) and (board[7][4] != $) and (board[7][5] != $) and (board[7][6] != $) and (board[7][7] != $) and (board[7][8] != $) and (board[7][9] != $) and (board[7][10] != $) and (board[7][11] != $) and (board[7][12] != $) and (board[7][13] != $) and (board[7][14] != $) and (board[7][15] != $) and (board[7][16] != $) and (board[7][17] != $) and (board[7][18] != $) and (board[8][0] != $) and (board[8][1] != $) and (board[8][2] != $) and (board[8][3] != $) and (board[8][4] != $) and (board[8][5] != $) and (board[8][6] != $) and (board[8][7] != $) and (board[8][8] != $) and (board[8][9] != $) and (board[8][10] != $) and (board[8][11] != $) and (board[8][12] != $) and (board[8][13] != $) and (board[8][14] != $) and (board[8][15] != $) and (board[8][16] != $) and (board[8][17] != $) and (board[8][18] != $) and (board[9][0] != $) and (board[9][1] != $) and (board[9][2] != $) and (board[9][3] != $) and (board[9][4] != $) and (board[9][5] != $) and (board[9][6] != $) and (board[9][7] != $) and (board[9][8] != $) and (board[9][9] != $) and (board[9][10] != $) and (board[9][11] != $) and (board[9][12] != $) and (board[9][13] != $) and (board[9][14] != $) and (board[9][15] != $) and (board[9][16] != $) and (board[9][17] != $) and (board[9][18] != $) and (board[10][0] != $) and (board[10][1] != $) and (board[10][2] != $) and (board[10][3] != $) and (board[10][4] != $) and (board[10][5] != $) and (board[10][6] != $) and (board[10][7] != $) and (board[10][8] != $) and (board[10][9] != $) and (board[10][10] != $) and (board[10][11] != $) and (board[10][12] != $) and (board[10][13] != $) and (board[10][14] != $) and (board[10][15] != $) and (board[10][16] != $) and (board[10][17] != $) and (board[10][18] != $);

VAR
	board: array 0..10 of array 0..18 of {@, +, $, *, #, ., _};
	turn: {u, d, r, l, none};
	x: int;
	y: int;

ASSIGN
	init(turn) := none;
	init(x) := 11;
	init(y) := 8;

	init(board[0][0]) := -;
	init(board[0][1]) := -;
	init(board[0][2]) := -;
	init(board[0][3]) := -;
	init(board[0][4]) := #;
	init(board[0][5]) := #;
	init(board[0][6]) := #;
	init(board[0][7]) := #;
	init(board[0][8]) := #;
	init(board[0][9]) := -;
	init(board[0][10]) := -;
	init(board[0][11]) := -;
	init(board[0][12]) := -;
	init(board[0][13]) := -;
	init(board[0][14]) := -;
	init(board[0][15]) := -;
	init(board[0][16]) := -;
	init(board[0][17]) := -;
	init(board[0][18]) := -;
	init(board[1][0]) := -;
	init(board[1][1]) := -;
	init(board[1][2]) := -;
	init(board[1][3]) := -;
	init(board[1][4]) := #;
	init(board[1][5]) := -;
	init(board[1][6]) := -;
	init(board[1][7]) := -;
	init(board[1][8]) := #;
	init(board[1][9]) := -;
	init(board[1][10]) := -;
	init(board[1][11]) := -;
	init(board[1][12]) := -;
	init(board[1][13]) := -;
	init(board[1][14]) := -;
	init(board[1][15]) := -;
	init(board[1][16]) := -;
	init(board[1][17]) := -;
	init(board[1][18]) := -;
	init(board[2][0]) := -;
	init(board[2][1]) := -;
	init(board[2][2]) := -;
	init(board[2][3]) := -;
	init(board[2][4]) := #;
	init(board[2][5]) := $;
	init(board[2][6]) := -;
	init(board[2][7]) := -;
	init(board[2][8]) := #;
	init(board[2][9]) := -;
	init(board[2][10]) := -;
	init(board[2][11]) := -;
	init(board[2][12]) := -;
	init(board[2][13]) := -;
	init(board[2][14]) := -;
	init(board[2][15]) := -;
	init(board[2][16]) := -;
	init(board[2][17]) := -;
	init(board[2][18]) := -;
	init(board[3][0]) := -;
	init(board[3][1]) := -;
	init(board[3][2]) := #;
	init(board[3][3]) := #;
	init(board[3][4]) := #;
	init(board[3][5]) := -;
	init(board[3][6]) := -;
	init(board[3][7]) := $;
	init(board[3][8]) := #;
	init(board[3][9]) := #;
	init(board[3][10]) := -;
	init(board[3][11]) := -;
	init(board[3][12]) := -;
	init(board[3][13]) := -;
	init(board[3][14]) := -;
	init(board[3][15]) := -;
	init(board[3][16]) := -;
	init(board[3][17]) := -;
	init(board[3][18]) := -;
	init(board[4][0]) := -;
	init(board[4][1]) := -;
	init(board[4][2]) := #;
	init(board[4][3]) := -;
	init(board[4][4]) := -;
	init(board[4][5]) := $;
	init(board[4][6]) := -;
	init(board[4][7]) := $;
	init(board[4][8]) := -;
	init(board[4][9]) := #;
	init(board[4][10]) := -;
	init(board[4][11]) := -;
	init(board[4][12]) := -;
	init(board[4][13]) := -;
	init(board[4][14]) := -;
	init(board[4][15]) := -;
	init(board[4][16]) := -;
	init(board[4][17]) := -;
	init(board[4][18]) := -;
	init(board[5][0]) := #;
	init(board[5][1]) := #;
	init(board[5][2]) := #;
	init(board[5][3]) := -;
	init(board[5][4]) := #;
	init(board[5][5]) := -;
	init(board[5][6]) := #;
	init(board[5][7]) := #;
	init(board[5][8]) := -;
	init(board[5][9]) := #;
	init(board[5][10]) := -;
	init(board[5][11]) := -;
	init(board[5][12]) := -;
	init(board[5][13]) := #;
	init(board[5][14]) := #;
	init(board[5][15]) := #;
	init(board[5][16]) := #;
	init(board[5][17]) := #;
	init(board[5][18]) := #;
	init(board[6][0]) := #;
	init(board[6][1]) := -;
	init(board[6][2]) := -;
	init(board[6][3]) := -;
	init(board[6][4]) := #;
	init(board[6][5]) := -;
	init(board[6][6]) := #;
	init(board[6][7]) := #;
	init(board[6][8]) := -;
	init(board[6][9]) := #;
	init(board[6][10]) := #;
	init(board[6][11]) := #;
	init(board[6][12]) := #;
	init(board[6][13]) := #;
	init(board[6][14]) := -;
	init(board[6][15]) := -;
	init(board[6][16]) := .;
	init(board[6][17]) := .;
	init(board[6][18]) := #;
	init(board[7][0]) := #;
	init(board[7][1]) := -;
	init(board[7][2]) := $;
	init(board[7][3]) := -;
	init(board[7][4]) := -;
	init(board[7][5]) := $;
	init(board[7][6]) := -;
	init(board[7][7]) := -;
	init(board[7][8]) := -;
	init(board[7][9]) := -;
	init(board[7][10]) := -;
	init(board[7][11]) := -;
	init(board[7][12]) := -;
	init(board[7][13]) := -;
	init(board[7][14]) := -;
	init(board[7][15]) := -;
	init(board[7][16]) := .;
	init(board[7][17]) := .;
	init(board[7][18]) := #;
	init(board[8][0]) := #;
	init(board[8][1]) := #;
	init(board[8][2]) := #;
	init(board[8][3]) := #;
	init(board[8][4]) := #;
	init(board[8][5]) := -;
	init(board[8][6]) := #;
	init(board[8][7]) := #;
	init(board[8][8]) := #;
	init(board[8][9]) := -;
	init(board[8][10]) := #;
	init(board[8][11]) := @;
	init(board[8][12]) := #;
	init(board[8][13]) := #;
	init(board[8][14]) := -;
	init(board[8][15]) := -;
	init(board[8][16]) := .;
	init(board[8][17]) := .;
	init(board[8][18]) := #;
	init(board[9][0]) := -;
	init(board[9][1]) := -;
	init(board[9][2]) := -;
	init(board[9][3]) := -;
	init(board[9][4]) := #;
	init(board[9][5]) := -;
	init(board[9][6]) := -;
	init(board[9][7]) := -;
	init(board[9][8]) := -;
	init(board[9][9]) := -;
	init(board[9][10]) := #;
	init(board[9][11]) := #;
	init(board[9][12]) := #;
	init(board[9][13]) := #;
	init(board[9][14]) := #;
	init(board[9][15]) := #;
	init(board[9][16]) := #;
	init(board[9][17]) := #;
	init(board[9][18]) := #;
	init(board[10][0]) := -;
	init(board[10][1]) := -;
	init(board[10][2]) := -;
	init(board[10][3]) := -;
	init(board[10][4]) := #;
	init(board[10][5]) := #;
	init(board[10][6]) := #;
	init(board[10][7]) := #;
	init(board[10][8]) := #;
	init(board[10][9]) := #;
	init(board[10][10]) := #;
	init(board[10][11]) := -;
	init(board[10][12]) := -;
	init(board[10][13]) := -;
	init(board[10][14]) := -;
	init(board[10][15]) := -;
	init(board[10][16]) := -;
	init(board[10][17]) := -;
	init(board[10][18]) := -;

	next(turn) := case
		(possible_up) and (possible_down) and (possible_right) and (possible_left) : {u, d, r, l};
		(possible_up) and (possible_down) and (possible_right) : {u, d, r};
		(possible_up) and (possible_down) and (possible_left) : {u, d, l};
		(possible_up) and (possible_right) and (possible_left) : {u, r, l};
		(possible_down) and (possible_right) and (possible_left) : {d, r, l};
		(possible_up) and (possible_down) : {u, d};
		(possible_up) and (possible_right) : {u, r};
		(possible_up) and (possible_left) : {u, l};
		(possible_down) and (possible_right) : {d, r};
		(possible_down) and (possible_left) : {d, l};
		(possible_right) and (possible_left) : {r, l};
		(possible_up) : {u};
		(possible_down) : {d};
		(possible_right) : {r};
		(possible_left) : {l};
		TRUE : none;
	esac;

	next(x) := case
		(next(turn) = r) : x + 1;
		(next(turn) = l) : x - 1;
		TRUE : x;
	esac;

	next(y) := case
		(next(turn) = d) : y + 1;
		(next(turn) = u) : y - 1;
		TRUE : y;
	esac;

	next(board[y][x]) := case
		(board[y][x] = @) and (next(turn) != none) : -;
		(board[y][x] = +) and (next(turn) != none) : .;
		TRUE : board[y][x];
	esac;

	next(board[y][x + 1]) := case
		((board[y][x + 1] = -) or (board[y][x + 1] = $)) and (next(turn) = r) : @;
		((board[y][x + 1] = .) or (board[y][x + 1] = *)) and (next(turn) = r) : +;
		TRUE : board[y][x + 1];
	esac;

	next(board[y][x + 2]) := case
		((board[y][x + 1] = *) or (board[y][x + 1] = $)) and (board[y][x + 2] = -) and (next(turn) = r) : $;
		((board[y][x + 1] = *) or (board[y][x + 1] = $)) and (board[y][x + 2] = .) and (next(turn) = r) : *;
		TRUE : board[y][x + 2];
	esac;

	next(board[y][x - 1]) := case
		((board[y][x - 1] = -) or (board[y][x - 1] = $)) and (next(turn) = l) : @;
		((board[y][x - 1] = .) or (board[y][x - 1] = *)) and (next(turn) = l) : +;
		TRUE : board[y][x - 1];
	esac;

	next(board[y][x - 2]) := case
		((board[y][x - 1] = *) or (board[y][x - 1] = $)) and (board[y][x - 2] = -) and (next(turn) = l) : $;
		((board[y][x - 1] = *) or (board[y][x - 1] = $)) and (board[y][x - 2] = .) and (next(turn) = l) : *;
		TRUE : board[y][x - 2];
	esac;

	next(board[y + 1][x]) := case
		((board[y + 1][x] = -) or (board[y + 1][x] = $)) and (next(turn) = d) : @;
		((board[y + 1][x] = .) or (board[y + 1][x] = *)) and (next(turn) = d) : +;
		TRUE : board[y + 1][x];
	esac;

	next(board[y + 2][x]) := case
		((board[y + 1][x] = *) or (board[y + 1][x] = $)) and (board[y + 2][x] = -) and (next(turn) = d) : $;
		((board[y + 1][x] = *) or (board[y + 1][x] = $)) and (board[y + 2][x] = .) and (next(turn) = d) : *;
		TRUE : board[y + 2][x];
	esac;

	next(board[y - 1][x]) := case
		((board[y - 1][x] = -) or (board[y - 1][x] = $)) and (next(turn) = u) : @;
		((board[y - 1][x] = .) or (board[y - 1][x] = *)) and (next(turn) = u) : +;
		TRUE : board[y - 1][x];
	esac;

	next(board[y - 2][x]) := case
		((board[y - 1][x] = *) or (board[y - 1][x] = $)) and (board[y - 2][x] = -) and (next(turn) = u) : $;
		((board[y - 1][x] = *) or (board[y - 1][x] = $)) and (board[y - 2][x] = .) and (next(turn) = u) : *;
		TRUE : board[y - 2][x];
	esac;

LTLSPEC !F(done)