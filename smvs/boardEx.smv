MODULE main

DEFINE n := 11; m := 18;
	possible_up := !((y = 0) | (board[(y - 1)*m + x] = solamit) | (((board[(y - 1)*m + x] = dollar) | (board[(y - 1)*m + x] = dollar)) & ((board[(y - 2)*m + x] = dollar) | (board[(y - 2)*m + x] = dollar) | (board[(y - 2)*m + x] = solamit))));
	possible_down := !((y = n - 1) | (board[(y + 1)*m + x] = solamit) | (((board[(y + 1)*m + x] = dollar) | (board[(y + 1)*m + x] = dollar)) & ((board[(y + 2)*m + x] = dollar) | (board[(y + 2)*m + x] = dollar) | (board[(y + 2)*m + x] = solamit))));
	possible_right := !((x = m - 1) | (board[y*m + x + 1] = solamit) | (((board[y*m + x + 1] = dollar) | (board[y*m + x + 1] = dollar)) & ((board[y*m + x + 2] = dollar) | (board[y*m + x + 2] = dollar) | (board[y*m + x + 2] = solamit))));
	possible_left := !((x = 0) | (board[y*m + x - 1] = solamit) | (((board[y*m + x - 1] = dollar) | (board[y*m + x - 1] = dollar)) & ((board[y*m + x - 2] = dollar) | (board[y*m + x - 2] = dollar) | (board[y*m + x - 2] = solamit))));

	done := (board[0] != dollar) & (board[1] != dollar) & (board[2] != dollar) & (board[3] != dollar) & (board[4] != dollar) & (board[5] != dollar) & (board[6] != dollar) & (board[7] != dollar) & (board[8] != dollar) & (board[9] != dollar) & (board[10] != dollar) & (board[11] != dollar) & (board[12] != dollar) & (board[13] != dollar) & (board[14] != dollar) & (board[15] != dollar) & (board[16] != dollar) & (board[17] != dollar) & (board[18] != dollar) & (board[19] != dollar) & (board[20] != dollar) & (board[21] != dollar) & (board[22] != dollar) & (board[23] != dollar) & (board[24] != dollar) & (board[25] != dollar) & (board[26] != dollar) & (board[27] != dollar) & (board[28] != dollar) & (board[29] != dollar) & (board[30] != dollar) & (board[31] != dollar) & (board[32] != dollar) & (board[33] != dollar) & (board[34] != dollar) & (board[35] != dollar) & (board[36] != dollar) & (board[37] != dollar) & (board[38] != dollar) & (board[39] != dollar) & (board[40] != dollar) & (board[41] != dollar) & (board[42] != dollar) & (board[43] != dollar) & (board[44] != dollar) & (board[45] != dollar) & (board[46] != dollar) & (board[47] != dollar) & (board[48] != dollar) & (board[49] != dollar) & (board[50] != dollar) & (board[51] != dollar) & (board[52] != dollar) & (board[53] != dollar) & (board[54] != dollar) & (board[55] != dollar) & (board[56] != dollar) & (board[57] != dollar) & (board[58] != dollar) & (board[59] != dollar) & (board[60] != dollar) & (board[61] != dollar) & (board[62] != dollar) & (board[63] != dollar) & (board[64] != dollar) & (board[65] != dollar) & (board[66] != dollar) & (board[67] != dollar) & (board[68] != dollar) & (board[69] != dollar) & (board[70] != dollar) & (board[71] != dollar) & (board[72] != dollar) & (board[73] != dollar) & (board[74] != dollar) & (board[75] != dollar) & (board[76] != dollar) & (board[77] != dollar) & (board[78] != dollar) & (board[79] != dollar) & (board[80] != dollar) & (board[81] != dollar) & (board[82] != dollar) & (board[83] != dollar) & (board[84] != dollar) & (board[85] != dollar) & (board[86] != dollar) & (board[87] != dollar) & (board[88] != dollar) & (board[89] != dollar) & (board[90] != dollar) & (board[91] != dollar) & (board[92] != dollar) & (board[93] != dollar) & (board[94] != dollar) & (board[95] != dollar) & (board[96] != dollar) & (board[97] != dollar) & (board[98] != dollar) & (board[99] != dollar) & (board[100] != dollar) & (board[101] != dollar) & (board[102] != dollar) & (board[103] != dollar) & (board[104] != dollar) & (board[105] != dollar) & (board[106] != dollar) & (board[107] != dollar) & (board[108] != dollar) & (board[109] != dollar) & (board[110] != dollar) & (board[111] != dollar) & (board[112] != dollar) & (board[113] != dollar) & (board[114] != dollar) & (board[115] != dollar) & (board[116] != dollar) & (board[117] != dollar) & (board[118] != dollar) & (board[119] != dollar) & (board[120] != dollar) & (board[121] != dollar) & (board[122] != dollar) & (board[123] != dollar) & (board[124] != dollar) & (board[125] != dollar) & (board[126] != dollar) & (board[127] != dollar) & (board[128] != dollar) & (board[129] != dollar) & (board[130] != dollar) & (board[131] != dollar) & (board[132] != dollar) & (board[133] != dollar) & (board[134] != dollar) & (board[135] != dollar) & (board[136] != dollar) & (board[137] != dollar) & (board[138] != dollar) & (board[139] != dollar) & (board[140] != dollar) & (board[141] != dollar) & (board[142] != dollar) & (board[143] != dollar) & (board[144] != dollar) & (board[145] != dollar) & (board[146] != dollar) & (board[147] != dollar) & (board[148] != dollar) & (board[149] != dollar) & (board[150] != dollar) & (board[151] != dollar) & (board[152] != dollar) & (board[153] != dollar) & (board[154] != dollar) & (board[155] != dollar) & (board[156] != dollar) & (board[157] != dollar) & (board[158] != dollar) & (board[159] != dollar) & (board[160] != dollar) & (board[161] != dollar) & (board[162] != dollar) & (board[163] != dollar) & (board[164] != dollar) & (board[165] != dollar) & (board[166] != dollar) & (board[167] != dollar) & (board[168] != dollar) & (board[169] != dollar) & (board[170] != dollar) & (board[171] != dollar) & (board[172] != dollar) & (board[173] != dollar) & (board[174] != dollar) & (board[175] != dollar) & (board[176] != dollar) & (board[177] != dollar) & (board[178] != dollar) & (board[179] != dollar) & (board[180] != dollar) & (board[181] != dollar) & (board[182] != dollar) & (board[183] != dollar) & (board[184] != dollar) & (board[185] != dollar) & (board[186] != dollar) & (board[187] != dollar) & (board[188] != dollar) & (board[189] != dollar) & (board[190] != dollar) & (board[191] != dollar) & (board[192] != dollar) & (board[193] != dollar) & (board[194] != dollar) & (board[195] != dollar) & (board[196] != dollar) & (board[197] != dollar);

VAR
	board: array 0..197 of {shtrudel, plus, dollar, star, solamit, dot, minus};
	turn: {u, d, r, l, none};
	x: integer;
	y: integer;

ASSIGN
	init(turn) := none;
	init(x) := 11;
	init(y) := 8;

	init(board[0]) := minus;
	init(board[1]) := minus;
	init(board[2]) := minus;
	init(board[3]) := minus;
	init(board[4]) := solamit;
	init(board[5]) := solamit;
	init(board[6]) := solamit;
	init(board[7]) := solamit;
	init(board[8]) := solamit;
	init(board[9]) := minus;
	init(board[10]) := minus;
	init(board[11]) := minus;
	init(board[12]) := minus;
	init(board[13]) := minus;
	init(board[14]) := minus;
	init(board[15]) := minus;
	init(board[16]) := minus;
	init(board[17]) := minus;
	init(board[18]) := minus;
	init(board[19]) := minus;
	init(board[20]) := minus;
	init(board[21]) := minus;
	init(board[22]) := solamit;
	init(board[23]) := minus;
	init(board[24]) := minus;
	init(board[25]) := minus;
	init(board[26]) := solamit;
	init(board[27]) := minus;
	init(board[28]) := minus;
	init(board[29]) := minus;
	init(board[30]) := minus;
	init(board[31]) := minus;
	init(board[32]) := minus;
	init(board[33]) := minus;
	init(board[34]) := minus;
	init(board[35]) := minus;
	init(board[36]) := minus;
	init(board[37]) := minus;
	init(board[38]) := minus;
	init(board[39]) := minus;
	init(board[40]) := solamit;
	init(board[41]) := dollar;
	init(board[42]) := minus;
	init(board[43]) := minus;
	init(board[44]) := solamit;
	init(board[45]) := minus;
	init(board[46]) := minus;
	init(board[47]) := minus;
	init(board[48]) := minus;
	init(board[49]) := minus;
	init(board[50]) := minus;
	init(board[51]) := minus;
	init(board[52]) := minus;
	init(board[53]) := minus;
	init(board[54]) := minus;
	init(board[55]) := minus;
	init(board[56]) := solamit;
	init(board[57]) := solamit;
	init(board[58]) := solamit;
	init(board[59]) := minus;
	init(board[60]) := minus;
	init(board[61]) := dollar;
	init(board[62]) := solamit;
	init(board[63]) := solamit;
	init(board[64]) := minus;
	init(board[65]) := minus;
	init(board[66]) := minus;
	init(board[67]) := minus;
	init(board[68]) := minus;
	init(board[69]) := minus;
	init(board[70]) := minus;
	init(board[71]) := minus;
	init(board[72]) := minus;
	init(board[73]) := minus;
	init(board[74]) := solamit;
	init(board[75]) := minus;
	init(board[76]) := minus;
	init(board[77]) := dollar;
	init(board[78]) := minus;
	init(board[79]) := dollar;
	init(board[80]) := minus;
	init(board[81]) := solamit;
	init(board[82]) := minus;
	init(board[83]) := minus;
	init(board[84]) := minus;
	init(board[85]) := minus;
	init(board[86]) := minus;
	init(board[87]) := minus;
	init(board[88]) := minus;
	init(board[89]) := minus;
	init(board[90]) := solamit;
	init(board[91]) := solamit;
	init(board[92]) := solamit;
	init(board[93]) := minus;
	init(board[94]) := solamit;
	init(board[95]) := minus;
	init(board[96]) := solamit;
	init(board[97]) := solamit;
	init(board[98]) := minus;
	init(board[99]) := solamit;
	init(board[100]) := minus;
	init(board[101]) := minus;
	init(board[102]) := minus;
	init(board[103]) := solamit;
	init(board[104]) := solamit;
	init(board[105]) := solamit;
	init(board[106]) := solamit;
	init(board[107]) := solamit;
	init(board[108]) := solamit;
	init(board[109]) := minus;
	init(board[110]) := minus;
	init(board[111]) := minus;
	init(board[112]) := solamit;
	init(board[113]) := minus;
	init(board[114]) := solamit;
	init(board[115]) := solamit;
	init(board[116]) := minus;
	init(board[117]) := solamit;
	init(board[118]) := solamit;
	init(board[119]) := solamit;
	init(board[120]) := solamit;
	init(board[121]) := solamit;
	init(board[122]) := minus;
	init(board[123]) := minus;
	init(board[124]) := dot;
	init(board[125]) := dot;
	init(board[126]) := solamit;
	init(board[127]) := minus;
	init(board[128]) := dollar;
	init(board[129]) := minus;
	init(board[130]) := minus;
	init(board[131]) := dollar;
	init(board[132]) := minus;
	init(board[133]) := minus;
	init(board[134]) := minus;
	init(board[135]) := minus;
	init(board[136]) := minus;
	init(board[137]) := minus;
	init(board[138]) := minus;
	init(board[139]) := minus;
	init(board[140]) := minus;
	init(board[141]) := minus;
	init(board[142]) := dot;
	init(board[143]) := dot;
	init(board[144]) := solamit;
	init(board[145]) := solamit;
	init(board[146]) := solamit;
	init(board[147]) := solamit;
	init(board[148]) := solamit;
	init(board[149]) := minus;
	init(board[150]) := solamit;
	init(board[151]) := solamit;
	init(board[152]) := solamit;
	init(board[153]) := minus;
	init(board[154]) := solamit;
	init(board[155]) := shtrudel;
	init(board[156]) := solamit;
	init(board[157]) := solamit;
	init(board[158]) := minus;
	init(board[159]) := minus;
	init(board[160]) := dot;
	init(board[161]) := dot;
	init(board[162]) := minus;
	init(board[163]) := minus;
	init(board[164]) := minus;
	init(board[165]) := minus;
	init(board[166]) := solamit;
	init(board[167]) := minus;
	init(board[168]) := minus;
	init(board[169]) := minus;
	init(board[170]) := minus;
	init(board[171]) := minus;
	init(board[172]) := solamit;
	init(board[173]) := solamit;
	init(board[174]) := solamit;
	init(board[175]) := solamit;
	init(board[176]) := solamit;
	init(board[177]) := solamit;
	init(board[178]) := solamit;
	init(board[179]) := solamit;
	init(board[180]) := minus;
	init(board[181]) := minus;
	init(board[182]) := minus;
	init(board[183]) := minus;
	init(board[184]) := solamit;
	init(board[185]) := solamit;
	init(board[186]) := solamit;
	init(board[187]) := solamit;
	init(board[188]) := solamit;
	init(board[189]) := solamit;
	init(board[190]) := solamit;
	init(board[191]) := minus;
	init(board[192]) := minus;
	init(board[193]) := minus;
	init(board[194]) := minus;
	init(board[195]) := minus;
	init(board[196]) := minus;
	init(board[197]) := minus;

	next(turn) := case
		(possible_up) & (possible_down) & (possible_right) & (possible_left) : {u, d, r, l};
		(possible_up) & (possible_down) & (possible_right) : {u, d, r};
		(possible_up) & (possible_down) & (possible_left) : {u, d, l};
		(possible_up) & (possible_right) & (possible_left) : {u, r, l};
		(possible_down) & (possible_right) & (possible_left) : {d, r, l};
		(possible_up) & (possible_down) : {u, d};
		(possible_up) & (possible_right) : {u, r};
		(possible_up) & (possible_left) : {u, l};
		(possible_down) & (possible_right) : {d, r};
		(possible_down) & (possible_left) : {d, l};
		(possible_right) & (possible_left) : {r, l};
		(possible_up) : {u};
		(possible_down) : {d};
		(possible_right) : {r};
		(possible_left) : {l};
		TRUE : none;
	esac;

	next(x) := case
		(next(turn) = r) : x + 1;
		(next(turn) = l) : x - 1;
		TRUE : x;
	esac;

	next(y) := case
		(next(turn) = d) : y + 1;
		(next(turn) = u) : y - 1;
		TRUE : y;
	esac;

	next(board[x]) := case
		(board[y*m + x] = shtrudel) & (next(turn) != none) : minus;
		(board[y*m + x] = plus) & (next(turn) != none) : dot;
		TRUE : board[y*m + x];
	esac;

	next(board[y][x + 1]) := case
		((board[y][x + 1] = minus) | (board[y][x + 1] = dollar)) & (next(turn) = r) : shtrudel;
		((board[y][x + 1] = dot) | (board[y][x + 1] = star)) & (next(turn) = r) : plus;
		TRUE : board[y][x + 1];
	esac;

	next(board[y][x + 2]) := case
		((board[y][x + 1] = star) | (board[y][x + 1] = dollar)) & (board[y][x + 2] = minus) & (next(turn) = r) : dollar;
		((board[y][x + 1] = star) | (board[y][x + 1] = dollar)) & (board[y][x + 2] = dot) & (next(turn) = r) : star;
		TRUE : board[y][x + 2];
	esac;

	next(board[y][x - 1]) := case
		((board[y][x - 1] = minus) | (board[y][x - 1] = dollar)) & (next(turn) = l) : shtrudel;
		((board[y][x - 1] = dot) | (board[y][x - 1] = star)) & (next(turn) = l) : plus;
		TRUE : board[y][x - 1];
	esac;

	next(board[y][x - 2]) := case
		((board[y][x - 1] = star) | (board[y][x - 1] = dollar)) & (board[y][x - 2] = minus) & (next(turn) = l) : dollar;
		((board[y][x - 1] = star) | (board[y][x - 1] = dollar)) & (board[y][x - 2] = dot) & (next(turn) = l) : star;
		TRUE : board[y][x - 2];
	esac;

	next(board[y + 1][x]) := case
		((board[y + 1][x] = minus) | (board[y + 1][x] = dollar)) & (next(turn) = d) : shtrudel;
		((board[y + 1][x] = dot) | (board[y + 1][x] = star)) & (next(turn) = d) : plus;
		TRUE : board[y + 1][x];
	esac;

	next(board[y + 2][x]) := case
		((board[y + 1][x] = star) | (board[y + 1][x] = dollar)) & (board[y + 2][x] = minus) & (next(turn) = d) : dollar;
		((board[y + 1][x] = star) | (board[y + 1][x] = dollar)) & (board[y + 2][x] = dot) & (next(turn) = d) : star;
		TRUE : board[y + 2][x];
	esac;

	next(board[y - 1][x]) := case
		((board[y - 1][x] = minus) | (board[y - 1][x] = dollar)) & (next(turn) = u) : shtrudel;
		((board[y - 1][x] = dot) | (board[y - 1][x] = star)) & (next(turn) = u) : plus;
		TRUE : board[y - 1][x];
	esac;

	next(board[y - 2][x]) := case
		((board[y - 1][x] = star) | (board[y - 1][x] = dollar)) & (board[y - 2][x] = minus) & (next(turn) = u) : dollar;
		((board[y - 1][x] = star) | (board[y - 1][x] = dollar)) & (board[y - 2][x] = dot) & (next(turn) = u) : star;
		TRUE : board[y - 2][x];
	esac;

LTLSPEC !F(done)