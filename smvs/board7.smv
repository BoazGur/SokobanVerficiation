MODULE main

DEFINE n := 10; m := 10;
	possible_up := !((y = 0) | (board[(y - 1)*m + x] = solamit) | (((board[(y - 1)*m + x] = dollar) | (board[(y - 1)*m + x] = dollar)) & ((board[(y - 2)*m + x] = dollar) | (board[(y - 2)*m + x] = dollar) | (board[(y - 2)*m + x] = solamit))));
	possible_down := !((y = n - 1) | (board[(y + 1)*m + x] = solamit) | (((board[(y + 1)*m + x] = dollar) | (board[(y + 1)*m + x] = dollar)) & ((board[(y + 2)*m + x] = dollar) | (board[(y + 2)*m + x] = dollar) | (board[(y + 2)*m + x] = solamit))));
	possible_right := !((x = m - 1) | (board[y*m + x + 1] = solamit) | (((board[y*m + x + 1] = dollar) | (board[y*m + x + 1] = dollar)) & ((board[y*m + x + 2] = dollar) | (board[y*m + x + 2] = dollar) | (board[y*m + x + 2] = solamit))));
	possible_left := !((x = 0) | (board[y*m + x - 1] = solamit) | (((board[y*m + x - 1] = dollar) | (board[y*m + x - 1] = dollar)) & ((board[y*m + x - 2] = dollar) | (board[y*m + x - 2] = dollar) | (board[y*m + x - 2] = solamit))));

	done := (board[0] != dollar) & (board[1] != dollar) & (board[2] != dollar) & (board[3] != dollar) & (board[4] != dollar) & (board[5] != dollar) & (board[6] != dollar) & (board[7] != dollar) & (board[8] != dollar) & (board[9] != dollar) & (board[10] != dollar) & (board[11] != dollar) & (board[12] != dollar) & (board[13] != dollar) & (board[14] != dollar) & (board[15] != dollar) & (board[16] != dollar) & (board[17] != dollar) & (board[18] != dollar) & (board[19] != dollar) & (board[20] != dollar) & (board[21] != dollar) & (board[22] != dollar) & (board[23] != dollar) & (board[24] != dollar) & (board[25] != dollar) & (board[26] != dollar) & (board[27] != dollar) & (board[28] != dollar) & (board[29] != dollar) & (board[30] != dollar) & (board[31] != dollar) & (board[32] != dollar) & (board[33] != dollar) & (board[34] != dollar) & (board[35] != dollar) & (board[36] != dollar) & (board[37] != dollar) & (board[38] != dollar) & (board[39] != dollar) & (board[40] != dollar) & (board[41] != dollar) & (board[42] != dollar) & (board[43] != dollar) & (board[44] != dollar) & (board[45] != dollar) & (board[46] != dollar) & (board[47] != dollar) & (board[48] != dollar) & (board[49] != dollar) & (board[50] != dollar) & (board[51] != dollar) & (board[52] != dollar) & (board[53] != dollar) & (board[54] != dollar) & (board[55] != dollar) & (board[56] != dollar) & (board[57] != dollar) & (board[58] != dollar) & (board[59] != dollar) & (board[60] != dollar) & (board[61] != dollar) & (board[62] != dollar) & (board[63] != dollar) & (board[64] != dollar) & (board[65] != dollar) & (board[66] != dollar) & (board[67] != dollar) & (board[68] != dollar) & (board[69] != dollar) & (board[70] != dollar) & (board[71] != dollar) & (board[72] != dollar) & (board[73] != dollar) & (board[74] != dollar) & (board[75] != dollar) & (board[76] != dollar) & (board[77] != dollar) & (board[78] != dollar) & (board[79] != dollar) & (board[80] != dollar) & (board[81] != dollar) & (board[82] != dollar) & (board[83] != dollar) & (board[84] != dollar) & (board[85] != dollar) & (board[86] != dollar) & (board[87] != dollar) & (board[88] != dollar) & (board[89] != dollar) & (board[90] != dollar) & (board[91] != dollar) & (board[92] != dollar) & (board[93] != dollar) & (board[94] != dollar) & (board[95] != dollar) & (board[96] != dollar) & (board[97] != dollar) & (board[98] != dollar) & (board[99] != dollar);

VAR
	board: array 0..99 of {shtrudel, plus, dollar, star, solamit, dot, minus};
	turn: {u, d, r, l, none};
	x: integer;
	y: integer;

ASSIGN
	init(turn) := none;
	init(x) := 3;
	init(y) := 4;

	init(board[0]) := solamit;
	init(board[1]) := solamit;
	init(board[2]) := solamit;
	init(board[3]) := solamit;
	init(board[4]) := solamit;
	init(board[5]) := solamit;
	init(board[6]) := solamit;
	init(board[7]) := solamit;
	init(board[8]) := solamit;
	init(board[9]) := solamit;
	init(board[10]) := solamit;
	init(board[11]) := minus;
	init(board[12]) := minus;
	init(board[13]) := minus;
	init(board[14]) := minus;
	init(board[15]) := minus;
	init(board[16]) := minus;
	init(board[17]) := solamit;
	init(board[18]) := solamit;
	init(board[19]) := solamit;
	init(board[20]) := solamit;
	init(board[21]) := minus;
	init(board[22]) := minus;
	init(board[23]) := solamit;
	init(board[24]) := minus;
	init(board[25]) := minus;
	init(board[26]) := minus;
	init(board[27]) := dot;
	init(board[28]) := solamit;
	init(board[29]) := solamit;
	init(board[30]) := solamit;
	init(board[31]) := minus;
	init(board[32]) := dollar;
	init(board[33]) := minus;
	init(board[34]) := minus;
	init(board[35]) := minus;
	init(board[36]) := minus;
	init(board[37]) := minus;
	init(board[38]) := solamit;
	init(board[39]) := solamit;
	init(board[40]) := solamit;
	init(board[41]) := minus;
	init(board[42]) := minus;
	init(board[43]) := shtrudel;
	init(board[44]) := solamit;
	init(board[45]) := minus;
	init(board[46]) := minus;
	init(board[47]) := minus;
	init(board[48]) := solamit;
	init(board[49]) := solamit;
	init(board[50]) := solamit;
	init(board[51]) := solamit;
	init(board[52]) := solamit;
	init(board[53]) := minus;
	init(board[54]) := minus;
	init(board[55]) := minus;
	init(board[56]) := minus;
	init(board[57]) := star;
	init(board[58]) := solamit;
	init(board[59]) := solamit;
	init(board[60]) := solamit;
	init(board[61]) := solamit;
	init(board[62]) := solamit;
	init(board[63]) := solamit;
	init(board[64]) := solamit;
	init(board[65]) := minus;
	init(board[66]) := minus;
	init(board[67]) := minus;
	init(board[68]) := minus;
	init(board[69]) := minus;
	init(board[70]) := solamit;
	init(board[71]) := solamit;
	init(board[72]) := solamit;
	init(board[73]) := solamit;
	init(board[74]) := solamit;
	init(board[75]) := solamit;
	init(board[76]) := solamit;
	init(board[77]) := minus;
	init(board[78]) := minus;
	init(board[79]) := minus;
	init(board[80]) := solamit;
	init(board[81]) := solamit;
	init(board[82]) := solamit;
	init(board[83]) := solamit;
	init(board[84]) := solamit;
	init(board[85]) := solamit;
	init(board[86]) := solamit;
	init(board[87]) := minus;
	init(board[88]) := minus;
	init(board[89]) := minus;
	init(board[90]) := solamit;
	init(board[91]) := solamit;
	init(board[92]) := solamit;
	init(board[93]) := solamit;
	init(board[94]) := solamit;
	init(board[95]) := solamit;
	init(board[96]) := solamit;
	init(board[97]) := solamit;
	init(board[98]) := solamit;
	init(board[99]) := solamit;

	next(turn) := case
		(possible_up) & (possible_down) & (possible_right) & (possible_left) : {u, d, r, l};
		(possible_up) & (possible_down) & (possible_right) : {u, d, r};
		(possible_up) & (possible_down) & (possible_left) : {u, d, l};
		(possible_up) & (possible_right) & (possible_left) : {u, r, l};
		(possible_down) & (possible_right) & (possible_left) : {d, r, l};
		(possible_up) & (possible_down) : {u, d};
		(possible_up) & (possible_right) : {u, r};
		(possible_up) & (possible_left) : {u, l};
		(possible_down) & (possible_right) : {d, r};
		(possible_down) & (possible_left) : {d, l};
		(possible_right) & (possible_left) : {r, l};
		(possible_up) : {u};
		(possible_down) : {d};
		(possible_right) : {r};
		(possible_left) : {l};
		TRUE : none;
	esac;

	next(x) := case
		(next(turn) = r) : x + 1;
		(next(turn) = l) : x - 1;
		TRUE : x;
	esac;

	next(y) := case
		(next(turn) = d) : y + 1;
		(next(turn) = u) : y - 1;
		TRUE : y;
	esac;

	next(board[x]) := case
		(board[y*m + x] = shtrudel) & (next(turn) != none) : minus;
		(board[y*m + x] = plus) & (next(turn) != none) : dot;
		TRUE : board[y*m + x];
	esac;

	next(board[y][x + 1]) := case
		((board[y][x + 1] = minus) | (board[y][x + 1] = dollar)) & (next(turn) = r) : shtrudel;
		((board[y][x + 1] = dot) | (board[y][x + 1] = star)) & (next(turn) = r) : plus;
		TRUE : board[y][x + 1];
	esac;

	next(board[y][x + 2]) := case
		((board[y][x + 1] = star) | (board[y][x + 1] = dollar)) & (board[y][x + 2] = minus) & (next(turn) = r) : dollar;
		((board[y][x + 1] = star) | (board[y][x + 1] = dollar)) & (board[y][x + 2] = dot) & (next(turn) = r) : star;
		TRUE : board[y][x + 2];
	esac;

	next(board[y][x - 1]) := case
		((board[y][x - 1] = minus) | (board[y][x - 1] = dollar)) & (next(turn) = l) : shtrudel;
		((board[y][x - 1] = dot) | (board[y][x - 1] = star)) & (next(turn) = l) : plus;
		TRUE : board[y][x - 1];
	esac;

	next(board[y][x - 2]) := case
		((board[y][x - 1] = star) | (board[y][x - 1] = dollar)) & (board[y][x - 2] = minus) & (next(turn) = l) : dollar;
		((board[y][x - 1] = star) | (board[y][x - 1] = dollar)) & (board[y][x - 2] = dot) & (next(turn) = l) : star;
		TRUE : board[y][x - 2];
	esac;

	next(board[y + 1][x]) := case
		((board[y + 1][x] = minus) | (board[y + 1][x] = dollar)) & (next(turn) = d) : shtrudel;
		((board[y + 1][x] = dot) | (board[y + 1][x] = star)) & (next(turn) = d) : plus;
		TRUE : board[y + 1][x];
	esac;

	next(board[y + 2][x]) := case
		((board[y + 1][x] = star) | (board[y + 1][x] = dollar)) & (board[y + 2][x] = minus) & (next(turn) = d) : dollar;
		((board[y + 1][x] = star) | (board[y + 1][x] = dollar)) & (board[y + 2][x] = dot) & (next(turn) = d) : star;
		TRUE : board[y + 2][x];
	esac;

	next(board[y - 1][x]) := case
		((board[y - 1][x] = minus) | (board[y - 1][x] = dollar)) & (next(turn) = u) : shtrudel;
		((board[y - 1][x] = dot) | (board[y - 1][x] = star)) & (next(turn) = u) : plus;
		TRUE : board[y - 1][x];
	esac;

	next(board[y - 2][x]) := case
		((board[y - 1][x] = star) | (board[y - 1][x] = dollar)) & (board[y - 2][x] = minus) & (next(turn) = u) : dollar;
		((board[y - 1][x] = star) | (board[y - 1][x] = dollar)) & (board[y - 2][x] = dot) & (next(turn) = u) : star;
		TRUE : board[y - 2][x];
	esac;

LTLSPEC !F(done)